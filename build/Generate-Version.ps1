<#
.SYNOPSIS
    Generates version information from Git tags, similar to setuptools_scm
.DESCRIPTION
    Extracts version from Git tags and generates C# and C++ compatible version files
#>

param(
    [string]$OutputDir = "$(Split-Path $PSScriptRoot -Parent)\Generated"
)

function Get-GitVersion {
    try {
        # Get the latest tag
        $latestTag = git describe --tags --abbrev=0 2>$null
        
        if (-not $latestTag) {
            # No tags, use default version
            $commitHash = git rev-parse --short HEAD 2>$null
            if (-not $commitHash) {
                $commitHash = "unknown"
            }
            
            return @{
                Version = "0.1.0"
                FullVersion = "0.1.0.0"
                Major = 0
                Minor = 1
                Patch = 0
                Build = 0
                IsClean = $false
                Distance = 0
                CommitHash = $commitHash
                IsDirty = $false
            }
        }
        
        # Get full description with distance
        $describe = git describe --tags --long --dirty 2>$null
        
        # Parse: v1.2.3-10-g1234abc-dirty
        if ($describe -match '^v?(\d+)\.(\d+)\.(\d+)-(\d+)-g([0-9a-f]+)(-dirty)?$') {
            $major = $matches[1]
            $minor = $matches[2]
            $patch = $matches[3]
            $distance = [int]$matches[4]
            $commitHash = $matches[5]
            $isDirty = $matches[6] -eq '-dirty'
            
            # If there are commits since tag, increment patch
            if ($distance -gt 0) {
                $patch = [int]$patch + 1
                $build = $distance
            } else {
                $build = 0
            }
            
            $isClean = (-not $isDirty) -and ($distance -eq 0)
            
            return @{
                Version = "$major.$minor.$patch"
                FullVersion = "$major.$minor.$patch.$build"
                Major = $major
                Minor = $minor
                Patch = $patch
                Build = $build
                IsClean = $isClean
                Distance = $distance
                CommitHash = $commitHash
                IsDirty = $isDirty
            }
        }
        
        # Fallback: just parse the tag
        if ($latestTag -match '^v?(\d+)\.(\d+)\.(\d+)') {
            $commitHash = git rev-parse --short HEAD 2>$null
            if (-not $commitHash) {
                $commitHash = "unknown"
            }
            
            return @{
                Version = "$($matches[1]).$($matches[2]).$($matches[3])"
                FullVersion = "$($matches[1]).$($matches[2]).$($matches[3]).0"
                Major = $matches[1]
                Minor = $matches[2]
                Patch = $matches[3]
                Build = 0
                IsClean = $true
                Distance = 0
                CommitHash = $commitHash
            }
        }
    } catch {
        Write-Warning "Git command failed: $_"
    }
    
    # Ultimate fallback
    $commitHash = git rev-parse --short HEAD 2>$null
    if (-not $commitHash) {
        $commitHash = "unknown"
    }
    
    return @{
        Version = "0.1.0"
        FullVersion = "0.1.0.0"
        Major = 0
        Minor = 1
        Patch = 0
        Build = 0
        IsClean = $false
        Distance = 0
        CommitHash = $commitHash
    }
}

# Get version info
$versionInfo = Get-GitVersion

# Ensure output directory exists
New-Item -ItemType Directory -Force -Path $OutputDir | Out-Null

Write-Host "Generated Version: $($versionInfo.FullVersion)" -ForegroundColor Green
Write-Host "  Clean Build: $($versionInfo.IsClean)" -ForegroundColor Cyan
Write-Host "  Commit Hash: $($versionInfo.CommitHash)" -ForegroundColor Cyan

# Generate C# version file
$csContent = @"
// <auto-generated>
//     This code was generated by Generate-Version.ps1
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System.Reflection;

[assembly: AssemblyVersion("$($versionInfo.FullVersion)")]
[assembly: AssemblyFileVersion("$($versionInfo.FullVersion)")]
[assembly: AssemblyInformationalVersion("$($versionInfo.Version)+$($versionInfo.CommitHash)")]

internal static class GitVersionInformation
{
    public const string Version = "$($versionInfo.Version)";
    public const string FullVersion = "$($versionInfo.FullVersion)";
    public const string CommitHash = "$($versionInfo.CommitHash)";
    public const int CommitDistance = $($versionInfo.Distance);
    public const bool IsClean = $($versionInfo.IsClean.ToString().ToLower());
}
"@

$csContent | Out-File -FilePath "$OutputDir\VersionInfo.cs" -Encoding UTF8

# Generate C++ header file
$isCleanValue = if ($versionInfo.IsClean) { 1 } else { 0 }

$cppContent = @"
// <auto-generated>
//     This code was generated by Generate-Version.ps1
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#pragma once

#define VERSION_MAJOR $($versionInfo.Major)
#define VERSION_MINOR $($versionInfo.Minor)
#define VERSION_PATCH $($versionInfo.Patch)
#define VERSION_BUILD $($versionInfo.Build)

#define VERSION_STRING "$($versionInfo.FullVersion)"
#define VERSION_SHORT_STRING "$($versionInfo.Version)"
#define GIT_COMMIT_HASH "$($versionInfo.CommitHash)"
#define GIT_COMMIT_DISTANCE $($versionInfo.Distance)
#define GIT_IS_CLEAN $isCleanValue

// Version resource format
#define VER_FILEVERSION $($versionInfo.Major),$($versionInfo.Minor),$($versionInfo.Patch),$($versionInfo.Build)
#define VER_FILEVERSION_STR "$($versionInfo.FullVersion)\0"
#define VER_PRODUCTVERSION VER_FILEVERSION
#define VER_PRODUCTVERSION_STR VER_FILEVERSION_STR
"@

$cppContent | Out-File -FilePath "$OutputDir\version.h" -Encoding UTF8

# Note: Do NOT generate version.rc file - version info should be included in existing project .rc files if needed

Write-Host "`nGenerated files in: $OutputDir" -ForegroundColor Green
Write-Host "  - VersionInfo.cs (for C# projects)"
Write-Host "  - version.h (for C++ projects)"
Write-Host "`nNote: version.rc not generated - add version resource to your existing .rc file if needed"